{"version":3,"file":"parse-comment.js","names":["Object","defineProperty","exports","value","getValuesFromHTMLComment","isHTMLComment","parseListConfig","parseRuleIds","HTML_COMMENT_REGEXP","htmlString","test","commentValue","results","replace","all","comment","push","string","items","split","forEach","name","trim","keys"],"sources":["../src/parse-comment.js"],"sourcesContent":["// Copyright (c) 2016 azu\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n\"use strict\";\nconst HTML_COMMENT_REGEXP = /<!--((?:.|\\s)*?)-->/g;\nexport function isHTMLComment(htmlString) {\n    return HTML_COMMENT_REGEXP.test(htmlString);\n}\n\n/**\n * get comment value from html comment tag\n * @param {string} commentValue <!-- comment -->\n * @returns {string[]}\n */\nexport function getValuesFromHTMLComment(commentValue) {\n    const results = [];\n    commentValue.replace(HTML_COMMENT_REGEXP, function(all, comment){\n        results.push(comment);\n    });\n    return results;\n}\n/**\n * Parses a config of values separated by comma.\n * @param {string} string The string to parse.\n * @returns {Object} Result map of values and true values\n */\nexport function parseListConfig(string) {\n    const items = {};\n\n    // Collapse whitespace around ,\n    string = string.replace(/\\s*,\\s*/g, \",\");\n    string.split(/,+/).forEach(function (name) {\n        name = name.trim();\n        if (!name) {\n            return;\n        }\n        items[name] = true;\n    });\n    return items;\n}\n\n/**\n * parse \"textlint-enable aRule, bRule\" and return [\"aRule\", \"bRule\"]\n * @param {string} string\n * @returns {string[]}\n */\nexport function parseRuleIds(string) {\n    return Object.keys(parseListConfig(string));\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAACA,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,KAAA;AAAA;AAAAD,OAAA,CAAAE,wBAAA,GAAAA,wBAAA;AAAAF,OAAA,CAAAG,aAAA,GAAAA,aAAA;AAAAH,OAAA,CAAAI,eAAA,GAAAA,eAAA;AAAAJ,OAAA,CAAAK,YAAA,GAAAA,YAAA;AACb,IAAMC,mBAAmB,GAAG,sBAAsB;AAC3C,SAASH,aAAaA,CAACI,UAAU,EAAE;EACtC,OAAOD,mBAAmB,CAACE,IAAI,CAACD,UAAU,CAAC;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACO,SAASL,wBAAwBA,CAACO,YAAY,EAAE;EACnD,IAAMC,OAAO,GAAG,EAAE;EAClBD,YAAY,CAACE,OAAO,CAACL,mBAAmB,EAAE,UAASM,GAAG,EAAEC,OAAO,EAAC;IAC5DH,OAAO,CAACI,IAAI,CAACD,OAAO,CAAC;EACzB,CAAC,CAAC;EACF,OAAOH,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACO,SAASN,eAAeA,CAACW,MAAM,EAAE;EACpC,IAAMC,KAAK,GAAG,CAAC,CAAC;;EAEhB;EACAD,MAAM,GAAGA,MAAM,CAACJ,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC;EACxCI,MAAM,CAACE,KAAK,CAAC,IAAI,CAAC,CAACC,OAAO,CAAC,UAAUC,IAAI,EAAE;IACvCA,IAAI,GAAGA,IAAI,CAACC,IAAI,CAAC,CAAC;IAClB,IAAI,CAACD,IAAI,EAAE;MACP;IACJ;IACAH,KAAK,CAACG,IAAI,CAAC,GAAG,IAAI;EACtB,CAAC,CAAC;EACF,OAAOH,KAAK;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACO,SAASX,YAAYA,CAACU,MAAM,EAAE;EACjC,OAAOjB,MAAM,CAACuB,IAAI,CAACjB,eAAe,CAACW,MAAM,CAAC,CAAC;AAC/C","ignoreList":[]}